{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// import { Command } from 'commander'\r\nimport { createReadStream } from 'fs'\r\nimport unzipper from 'unzipper'\r\nimport csv from 'csv-parser'\r\nimport { workerCount, startWriters, enqueue } from '@psysecgroup/threaded-sqlite-write'\r\n\r\nconst isBadPart = /\\d/\r\nconst singleQuoteRegex = /'/g\r\nconst plusRegex = /\\+|_/g\r\nconst minusRegex = /-/g\r\nconst csvConfig = {\r\n  separator: '\\t',\r\n  headers: ['GLOBALEVENTID', 'SQLDATE', 'MonthYear', 'Year', 'FractionDate', 'Actor1Code', 'Actor1Name', 'Actor1CountryCode', 'Actor1KnownGroupCode', 'Actor1EthnicCode', 'Actor1Religion1Code', 'Actor1Religion2Code', 'Actor1Type1Code', 'Actor1Type2Code', 'Actor1Type3Code', 'Actor2Code', 'Actor2Name', 'Actor2CountryCode', 'Actor2KnownGroupCode', 'Actor2EthnicCode', 'Actor2Religion1Code', 'Actor2Religion2Code', 'Actor2Type1Code', 'Actor2Type2Code', 'Actor2Type3Code', 'IsRootEvent', 'EventCode', 'EventBaseCode', 'EventRootCode', 'QuadClass', 'GoldsteinScale', 'NumMentions', 'NumSources', 'NumArticles', 'AvgTone', 'Actor1Geo_Type', 'Actor1Geo_FullName', 'Actor1Geo_CountryCode', 'Actor1Geo_ADM1Code', 'Actor1Geo_Lat', 'Actor1Geo_Long', 'Actor1Geo_FeatureID', 'Actor2Geo_Type', 'Actor2Geo_FullName', 'Actor2Geo_CountryCode', 'Actor2Geo_ADM1Code', 'Actor2Geo_Lat', 'Actor2Geo_Long', 'Actor2Geo_FeatureID', 'ActionGeo_Type', 'ActionGeo_FullName', 'ActionGeo_CountryCode', 'ActionGeo_ADM1Code', 'ActionGeo_Lat', 'ActionGeo_Long', 'ActionGeo_FeatureID', 'DATEADDED', 'SOURCEURL']\r\n}\r\n\r\n/**\r\n *\r\n */\r\nasync function extractAndProcessZip (zipFilePath) {\r\n  const results = []\r\n\r\n  // Create a stream to read the zip file\r\n  const zipStream = createReadStream(zipFilePath)\r\n    .pipe(unzipper.Parse({ forceStream: true }))\r\n\r\n  for await (const entry of zipStream) {\r\n    const fileName = entry.path.toLowerCase()\r\n    const type = entry.type // 'Directory' or 'File'\r\n\r\n    if (type === 'File' && fileName.endsWith('.csv')) {\r\n      const csvResults = await processCsv(entry)\r\n      results.push(...csvResults)\r\n    } else {\r\n      entry.autodrain()\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction addEntities (str, array) {\r\n  if (str.length > 0) {\r\n    str\r\n      .toLowerCase()\r\n      .split(',')\r\n      .forEach(entity => {\r\n        const trimmed = entity.trim()\r\n        if (array.indexOf(trimmed) === -1) {\r\n          array.push(trimmed)\r\n        }\r\n      })\r\n  }\r\n  return array\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction processCsv (csvStream) {\r\n  return new Promise((resolve, reject) => {\r\n    const urls = {}\r\n\r\n    csvStream\r\n      .pipe(csv(csvConfig))\r\n      .on('data', (data) => { \r\n        if (urls[data.SOURCEURL] === undefined) {\r\n          urls[data.SOURCEURL] = {\r\n            year: parseInt(data.Year),\r\n            month: parseInt(data.MonthYear.substring(4)),\r\n            day: parseInt(data.SQLDATE.substring(6)),\r\n            conflict: 0,\r\n            events: 0,\r\n            tone: parseFloat(data.AvgTone),\r\n            domain: '',\r\n            url: data.SOURCEURL.replace(singleQuoteRegex, \"''\"),\r\n            summary: '',\r\n            entities: []          \r\n          }\r\n        }\r\n\r\n        const source = urls[data.SOURCEURL]\r\n\r\n        source.entities = addEntities(data.Actor1Geo_FullName, source.entities)\r\n        source.entities = addEntities(data.Actor2Geo_FullName, source.entities)\r\n        source.entities = addEntities(data.Actor1Name, source.entities)\r\n        source.entities = addEntities(data.Actor2Name, source.entities)\r\n        source.entities = addEntities(data.ActionGeo_FullName, source.entities)\r\n\r\n        const urlParts = data.SOURCEURL\r\n          .toLowerCase()\r\n          .replace(plusRegex, '-')\r\n          .split('/')\r\n\r\n        source.domain = urlParts[2].replace('www.', '').replace(singleQuoteRegex, \"''\")\r\n\r\n        let summary = ''\r\n\r\n        for (const part of urlParts) {\r\n          if (part.length > summary.length && part.indexOf('?') === -1 && part.indexOf('-') > -1) {\r\n            summary = part\r\n          }\r\n        }\r\n\r\n        summary = summary\r\n          .replace('.html', '')\r\n          .replace('.htm', '')\r\n          .replace(minusRegex, ' ')\r\n          .trim()\r\n\r\n        if (summary === '') {\r\n          const newSummary = []\r\n          for (let part of urlParts.slice(3)) {\r\n            if (part.length <= 1 || part === '*') {\r\n              continue\r\n            }\r\n\r\n            let index = part.indexOf('?')\r\n\r\n            if (index > -1) {\r\n              part = part.substring(0, index)\r\n            }\r\n\r\n            index = part.indexOf('.')\r\n\r\n            if (index > -1) {\r\n              part = part.substring(0, index)\r\n            }\r\n\r\n            if (part.length === 0) {\r\n              continue\r\n            }\r\n\r\n            if (isBadPart.test(part) === false) {\r\n              if (newSummary.indexOf(part) === -1) {\r\n                newSummary.push(part.replace(minusRegex, ' '))\r\n              }\r\n            }\r\n          }\r\n\r\n          summary = newSummary.join(' ').replace(singleQuoteRegex, \"''\")\r\n        }\r\n\r\n        source.summary = summary\r\n\r\n        switch (data.QuadClass) {\r\n          case '2':\r\n            source.conflict += 0\r\n            break\r\n          case '1':\r\n            source.conflict += 25\r\n            break\r\n          case '3':\r\n            source.conflict += 50\r\n            break\r\n          case '4':\r\n            source.conflict += 75\r\n            break\r\n        }\r\n\r\n        source.events += 1\r\n        source.conflict += parseInt(data.GoldsteinScale) * -1\r\n      })\r\n      .on('end', () => {\r\n        const results = Object.values(urls)\r\n\r\n        results.map(result => {\r\n          result.entities = result.entities.join(',').replace(singleQuoteRegex, \"''\")\r\n          return result\r\n        })\r\n\r\n        resolve(results)\r\n      })\r\n      .on('error', (error) => reject(error))\r\n  })\r\n}\r\n\r\n/**\r\n *\r\n */\r\nasync function main () {\r\n  const zipFilePath = 'data/20240512.export.CSV.zip'\r\n  const results = await extractAndProcessZip(zipFilePath)\r\n\r\n  const rows = []\r\n  let i = 0\r\n\r\n  for (const result of results) {\r\n    const index = i % workerCount\r\n\r\n    if (rows[index] === undefined) {\r\n      rows[index] = []\r\n    }\r\n\r\n    rows[index].push(result)\r\n\r\n    i += 1\r\n  }\r\n\r\n  for (const row of rows) {\r\n    enqueue(row)\r\n  }\r\n\r\n  await startWriters(\r\n    // Directory to save the sqlite databases\r\n    'data',\r\n\r\n    // The name of the sqlite databases\r\n    '20240512',\r\n\r\n    // The CREATE TABLE sql for the table to populate (Must be CREATE TABLE IF NOT EXISTS)\r\n    'CREATE TABLE IF NOT EXISTS events (year INTEGER, month INTEGER, day INTEGER, conflict INTEGER, events INTEGER, tone REAL, domain TEXT, url TEXT, summary TEXT, entities TEXT);',\r\n\r\n    // The function that converts enqueue() arrays of data into a semicolon-separated string of SQL INSERTs.\r\n    function (data) {\r\n      let query = '';\r\n\r\n      for (const item of data) {\r\n        const year = item.year\r\n        const month = item.month\r\n        const day = item.day\r\n        const conflict = item.conflict\r\n        const events = item.events\r\n        const tone = item.tone\r\n        const domain = item.domain\r\n        const url = item.url\r\n        const summary = item.summary\r\n        const entities = item.entities\r\n\r\n        query += `INSERT INTO events (year, month, day, conflict, events, tone, domain, url, summary, entities) VALUES ('${year}, ${month}, ${day}, ${conflict}, ${events}, ${tone}, ${domain}, ${url}, ${summary}, ${entities}');`\r\n      }\r\n\r\n      return query\r\n    },\r\n\r\n    // If set to true, all created databases will be merged into one single database with every record (default)\r\n    // If set to false, a SQLite file will exist for each core your CPU has\r\n    true\r\n  );\r\n\r\n  // writeFileSync('output.json', JSON.stringify(results, null, 2))\r\n}\r\n\r\nmain()\r\n"],"mappings":"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","names":["unzipper","csv"]}