{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// import { Command } from 'commander'\r\nimport { createReadStream } from 'fs'\r\nimport unzipper from 'unzipper'\r\nimport csv from 'csv-parser'\r\n\r\n/**\r\n *\r\n */\r\nasync function extractAndProcessZip (zipFilePath) {\r\n  const results = []\r\n\r\n  // Create a stream to read the zip file\r\n  const zipStream = createReadStream(zipFilePath)\r\n    .pipe(unzipper.Parse({ forceStream: true }))\r\n\r\n  for await (const entry of zipStream) {\r\n    const fileName = entry.path\r\n    const type = entry.type; // 'Directory' or 'File'\r\n    // const size = entry.vars.uncompressedSize; // There is also compressedSize;\r\n\r\n    if (type === 'File' && fileName.endsWith('.csv')) {\r\n      console.log(fileName)\r\n      const csvResults = await processCsv(entry)\r\n      results.push(...csvResults)\r\n    } else {\r\n      entry.autodrain()\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction processCsv (csvStream) {\r\n  return new Promise((resolve, reject) => {\r\n    const csvResults = [];\r\n    csvStream\r\n      .pipe(csv())\r\n      .on('data', (data) => csvResults.push(data))\r\n      .on('end', () => resolve(csvResults))\r\n      .on('error', (error) => reject(error));\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nasync function main () {\r\n  const zipFilePath = 'data/20240512.export.CSV.zip';\r\n  const results = await extractAndProcessZip(zipFilePath)\r\n  console.log(results)\r\n}\r\n\r\nmain()\r\n\r\n/**\r\n * Get tweets piped in from a CURL query\r\n * Split words and strip stop words\r\n * Extract domains\r\n * Extact times\r\n * Extract username\r\n * INSERT username TO users IF NOT UNIQUE\r\n * INSERT tweetId, users.id, timestamp TO tweetIds IF NOT UNIQUE\r\n * INSERT word, tweetId.id TO words\r\n *   IF (word, tweetId.id) EXISTS\r\n *     iterate counter by 1\r\n *   ELSE\r\n *     set counter to 1\r\n * INSERT domain, tweetId.id TO domains\r\n *   IF (domain, tweetId.id) EXISTS\r\n *     iterate counter by 1\r\n *   ELSE\r\n *     set counter to 1\r\n * Run queries to generate report\r\n * Create a report image\r\n */\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,gBAAiC;AACjC,sBAAqB;AACrB,wBAAgB;AAKhB,eAAe,qBAAsB,aAAa;AAChD,QAAM,UAAU,CAAC;AAGjB,QAAM,gBAAY,4BAAiB,WAAW,EAC3C,KAAK,gBAAAA,QAAS,MAAM,EAAE,aAAa,KAAK,CAAC,CAAC;AAE7C,mBAAiB,SAAS,WAAW;AACnC,UAAM,WAAW,MAAM;AACvB,UAAM,OAAO,MAAM;AAGnB,QAAI,SAAS,UAAU,SAAS,SAAS,MAAM,GAAG;AAChD,cAAQ,IAAI,QAAQ;AACpB,YAAM,aAAa,MAAM,WAAW,KAAK;AACzC,cAAQ,KAAK,GAAG,UAAU;AAAA,IAC5B,OAAO;AACL,YAAM,UAAU;AAAA,IAClB;AAAA,EACF;AAEA,SAAO;AACT;AAKA,SAAS,WAAY,WAAW;AAC9B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,aAAa,CAAC;AACpB,cACG,SAAK,kBAAAC,SAAI,CAAC,EACV,GAAG,QAAQ,CAAC,SAAS,WAAW,KAAK,IAAI,CAAC,EAC1C,GAAG,OAAO,MAAM,QAAQ,UAAU,CAAC,EACnC,GAAG,SAAS,CAAC,UAAU,OAAO,KAAK,CAAC;AAAA,EACzC,CAAC;AACH;AAKA,eAAe,OAAQ;AACrB,QAAM,cAAc;AACpB,QAAM,UAAU,MAAM,qBAAqB,WAAW;AACtD,UAAQ,IAAI,OAAO;AACrB;AAEA,KAAK;","names":["unzipper","csv"]}